{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = __importStar(require(\"react\"));\n\nvar Year_1 = __importDefault(require(\"./Year\"));\n\nvar styles_1 = require(\"@material-ui/core/styles\");\n\nvar useUtils_1 = require(\"../../_shared/hooks/useUtils\");\n\nvar Wrapper_1 = require(\"../../wrappers/Wrapper\");\n\nexports.useStyles = styles_1.makeStyles({\n  container: {\n    height: 300,\n    overflowY: 'auto'\n  }\n}, {\n  name: 'MuiPickersYearSelection'\n});\n\nexports.YearSelection = function (_a) {\n  var date = _a.date,\n      onChange = _a.onChange,\n      onYearChange = _a.onYearChange,\n      minDate = _a.minDate,\n      maxDate = _a.maxDate,\n      disablePast = _a.disablePast,\n      disableFuture = _a.disableFuture,\n      animateYearScrolling = _a.animateYearScrolling;\n  var utils = useUtils_1.useUtils();\n  var classes = exports.useStyles();\n  var currentVariant = React.useContext(Wrapper_1.VariantContext);\n  var selectedYearRef = React.useRef(null);\n  React.useEffect(function () {\n    if (selectedYearRef.current && selectedYearRef.current.scrollIntoView) {\n      try {\n        selectedYearRef.current.scrollIntoView({\n          block: currentVariant === 'static' ? 'nearest' : 'center',\n          behavior: animateYearScrolling ? 'smooth' : 'auto'\n        });\n      } catch (e) {\n        // call without arguments in case when scrollIntoView works improperly (e.g. Firefox 52-57)\n        selectedYearRef.current.scrollIntoView();\n      }\n    }\n  }, []); // eslint-disable-line\n\n  var currentYear = utils.getYear(date);\n  var onYearSelect = React.useCallback(function (year) {\n    var newDate = utils.setYear(date, year);\n\n    if (onYearChange) {\n      onYearChange(newDate);\n    }\n\n    onChange(newDate, true);\n  }, [date, onChange, onYearChange, utils]);\n  return React.createElement(\"div\", {\n    className: classes.container\n  }, utils.getYearRange(minDate, maxDate).map(function (year) {\n    var yearNumber = utils.getYear(year);\n    var selected = yearNumber === currentYear;\n    return React.createElement(Year_1[\"default\"], {\n      key: utils.getYearText(year),\n      selected: selected,\n      value: yearNumber,\n      onSelect: onYearSelect,\n      ref: selected ? selectedYearRef : undefined,\n      disabled: Boolean(disablePast && utils.isBeforeYear(year, utils.date()) || disableFuture && utils.isAfterYear(year, utils.date()))\n    }, utils.getYearText(year));\n  }));\n};","map":null,"metadata":{},"sourceType":"script"}