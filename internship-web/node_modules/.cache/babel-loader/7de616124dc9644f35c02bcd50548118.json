{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = __importStar(require(\"react\"));\n\nvar clsx_1 = __importDefault(require(\"clsx\"));\n\nvar ClockType_1 = __importDefault(require(\"../constants/ClockType\"));\n\nvar ToolbarText_1 = __importDefault(require(\"../_shared/ToolbarText\"));\n\nvar ToolbarButton_1 = __importDefault(require(\"../_shared/ToolbarButton\"));\n\nvar PickerToolbar_1 = __importDefault(require(\"../_shared/PickerToolbar\"));\n\nvar utils_1 = require(\"../_helpers/utils\");\n\nvar useUtils_1 = require(\"../_shared/hooks/useUtils\");\n\nvar styles_1 = require(\"@material-ui/core/styles\");\n\nvar time_utils_1 = require(\"../_helpers/time-utils\");\n\nexports.useStyles = styles_1.makeStyles({\n  toolbarLandscape: {\n    flexWrap: 'wrap'\n  },\n  toolbarAmpmLeftPadding: {\n    paddingLeft: 50\n  },\n  separator: {\n    margin: '0 4px 0 2px',\n    cursor: 'default'\n  },\n  hourMinuteLabel: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    alignItems: 'flex-end'\n  },\n  hourMinuteLabelAmpmLandscape: {\n    marginTop: 'auto'\n  },\n  hourMinuteLabelReverse: {\n    flexDirection: 'row-reverse'\n  },\n  ampmSelection: {\n    marginLeft: 20,\n    marginRight: -20,\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  ampmLandscape: {\n    margin: '4px 0 auto',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    flexBasis: '100%'\n  },\n  ampmSelectionWithSeconds: {\n    marginLeft: 15,\n    marginRight: 10\n  },\n  ampmLabel: {\n    fontSize: 18\n  }\n}, {\n  name: 'MuiPickersTimePickerToolbar'\n});\n\nfunction useMeridiemMode(date, ampm, onChange) {\n  var utils = useUtils_1.useUtils();\n  var meridiemMode = time_utils_1.getMeridiem(date, utils);\n  var handleMeridiemChange = React.useCallback(function (mode) {\n    var timeWithMeridiem = time_utils_1.convertToMeridiem(date, mode, Boolean(ampm), utils);\n    onChange(timeWithMeridiem, false);\n  }, [ampm, date, onChange, utils]);\n  return {\n    meridiemMode: meridiemMode,\n    handleMeridiemChange: handleMeridiemChange\n  };\n}\n\nexports.useMeridiemMode = useMeridiemMode;\n\nexports.TimePickerToolbar = function (_a) {\n  var _b, _c, _d;\n\n  var date = _a.date,\n      views = _a.views,\n      ampm = _a.ampm,\n      openView = _a.openView,\n      onChange = _a.onChange,\n      isLandscape = _a.isLandscape,\n      setOpenView = _a.setOpenView;\n  var utils = useUtils_1.useUtils();\n  var theme = styles_1.useTheme();\n  var classes = exports.useStyles();\n\n  var _e = useMeridiemMode(date, ampm, onChange),\n      meridiemMode = _e.meridiemMode,\n      handleMeridiemChange = _e.handleMeridiemChange;\n\n  var clockTypographyVariant = isLandscape ? 'h3' : 'h2';\n  return React.createElement(PickerToolbar_1[\"default\"], {\n    isLandscape: isLandscape,\n    className: clsx_1[\"default\"]((_b = {}, _b[classes.toolbarLandscape] = isLandscape, _b[classes.toolbarAmpmLeftPadding] = ampm && !isLandscape, _b))\n  }, React.createElement(\"div\", {\n    className: clsx_1[\"default\"](classes.hourMinuteLabel, (_c = {}, _c[classes.hourMinuteLabelAmpmLandscape] = ampm && isLandscape, _c[classes.hourMinuteLabelReverse] = theme.direction === 'rtl', _c))\n  }, utils_1.arrayIncludes(views, 'hours') && React.createElement(ToolbarButton_1[\"default\"], {\n    variant: clockTypographyVariant,\n    onClick: function onClick() {\n      return setOpenView(ClockType_1[\"default\"].HOURS);\n    },\n    selected: openView === ClockType_1[\"default\"].HOURS,\n    label: utils.getHourText(date, Boolean(ampm))\n  }), utils_1.arrayIncludes(views, ['hours', 'minutes']) && React.createElement(ToolbarText_1[\"default\"], {\n    label: \":\",\n    variant: clockTypographyVariant,\n    selected: false,\n    className: classes.separator\n  }), utils_1.arrayIncludes(views, 'minutes') && React.createElement(ToolbarButton_1[\"default\"], {\n    variant: clockTypographyVariant,\n    onClick: function onClick() {\n      return setOpenView(ClockType_1[\"default\"].MINUTES);\n    },\n    selected: openView === ClockType_1[\"default\"].MINUTES,\n    label: utils.getMinuteText(date)\n  }), utils_1.arrayIncludes(views, ['minutes', 'seconds']) && React.createElement(ToolbarText_1[\"default\"], {\n    variant: \"h2\",\n    label: \":\",\n    selected: false,\n    className: classes.separator\n  }), utils_1.arrayIncludes(views, 'seconds') && React.createElement(ToolbarButton_1[\"default\"], {\n    variant: \"h2\",\n    onClick: function onClick() {\n      return setOpenView(ClockType_1[\"default\"].SECONDS);\n    },\n    selected: openView === ClockType_1[\"default\"].SECONDS,\n    label: utils.getSecondText(date)\n  })), ampm && React.createElement(\"div\", {\n    className: clsx_1[\"default\"](classes.ampmSelection, (_d = {}, _d[classes.ampmLandscape] = isLandscape, _d[classes.ampmSelectionWithSeconds] = utils_1.arrayIncludes(views, 'seconds'), _d))\n  }, React.createElement(ToolbarButton_1[\"default\"], {\n    disableRipple: true,\n    variant: \"subtitle1\",\n    selected: meridiemMode === 'am',\n    typographyClassName: classes.ampmLabel,\n    label: utils.getMeridiemText('am'),\n    onClick: function onClick() {\n      return handleMeridiemChange('am');\n    }\n  }), React.createElement(ToolbarButton_1[\"default\"], {\n    disableRipple: true,\n    variant: \"subtitle1\",\n    selected: meridiemMode === 'pm',\n    typographyClassName: classes.ampmLabel,\n    label: utils.getMeridiemText('pm'),\n    onClick: function onClick() {\n      return handleMeridiemChange('pm');\n    }\n  })));\n};\n\nexports[\"default\"] = exports.TimePickerToolbar;","map":null,"metadata":{},"sourceType":"script"}